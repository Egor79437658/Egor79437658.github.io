//Дано число n. Определите, сколькими способами можно расставить на доске n*n n ферзей, не бьющих друг друга.
//вывод - количество возможых расстоновок
#include <iostream>
#include <cmath>
#include <vector>

using namespace std;
void output(vector <vector<int>> b, int* counter) {// изначально функция для вывода всех возможных расствновок, сейчас считает их количество
	//for (auto line : b) {
		//for (auto num : line) {
			//cout << num;
		//}
		//cout << endl;
	//}
	*counter += 1;
}

int line_cheking(vector <vector<int>> b, int line, int* p) {// создание массива, b - массив, line номер строки куда ставится ферзь
	for (int i = 0, n = b.size(); i < n; i++) {
		if (b[line][i] != 1) {// еденицей обозначается клетка, которую бьет ферзь. условие проверяет что ферзяь можно разместить
			if (line == n - 1) {// если на последней линии есть возможность поставить ферзя
				b[line][i] = 2; // постановка ферзя (сейчас нет практической цели, раньше нужно было при выводе варианта расстановки
				output(b, p); // функция изменения "глобальной" переменной. раньше также выводила вариант расстановки
				//cout << endl; // пробел между расстановками
				return 0;
			}
			else {// если линия не последняя
				vector <vector<int>> c = b;//создание массива с возможным расположением ферзя
				for (int j = line; j < n; j++) {
					for (int k = 0; k < n; k++) {
						if (j == line || k == i || j + k == line + i || j - k == line - i) {// поиск всех клеток, которые может бить ферзь
							c[j][k] = 1;//их обозначение
						}
					}
				}
				c[line][i] = 2;// обозначение где стоит ферзь
				line_cheking(c, line + 1, p); // повторение для следующей линии
			}
		}
	}
	return 0;
}
int placing_queen(int n) {// функция для запуска процесса
	vector <vector<int>> a(n, vector<int>(n, 0));
	int counter = 0; 
	int* p = &counter; // создание "глобальной" переменной, значение которой будет передаваться сквозь рекурсию
	line_cheking(a, 0, p); // запуск процесса
	return counter;
}
int main() {
	int n;
	cin >> n;
	cout << placing_queen(n);
	return 0;
}